# Windows 11 Download Helper Script
# Generated by GitHub Action on 2025-05-01

# The following link is direct from Microsoft and valid long-term:
$downloadURL = "https://software.download.prss.microsoft.com/dbazure/Win11_24H2_English_x64.iso?t=b3faefa6-1499-46ad-8297-21f49db39854&P1=1746198665&P2=601&P3=2&P4=qT30uT293f27WVCziDaR2K5i06MwM5TNMd6AP3pUzRDmrNBJiqoPYdffSqLQg0errQOI%2f7C%2byO0B68TlycNTIhAm7ZZ%2frPz8RALi5Nu4%2bpdE6u%2f34EvUj7F4q6Qj3V6mSAcoIEkgj3v6TXE%2bBQYs0ihsJe8J1pMWnG3NX%2fGFEF1VHhZfqv36LKh%2bwmhvpoYu4eE6RSOd0ZPotq3cl3FvJP0XFCQRMbrL3qzOS4IeoLvn7jF30gtLsctHcxCuxeJYDLBWyLk8ayxk5IeYau36uXGqE8LWqXTH6aAVWj1E5ZsnegAjM2Ru6IOl6Hk%2bOK4ndBqdZsgOtFTtleVbm3OSgQ%3d%3d"

# Ask user if they want to download the ISO
$downloadISO = Read-Host "Do you want to download Windows 11 ISO now? (Y/N)"

if ($downloadISO -eq "Y" -or $downloadISO -eq "y") {
    $outputPath = "$env:USERPROFILE\Downloads\Windows11.iso"
    
    # Ask if user wants to change default path
    $changePath = Read-Host "Default download location is: $outputPath. Change? (Y/N)"
    
    if ($changePath -eq "Y" -or $changePath -eq "y") {
        $outputPath = Read-Host "Enter new path (including filename.iso)"
    }
    
    # Create directory if it doesn't exist
    $outputDir = Split-Path -Parent $outputPath
    if (!(Test-Path $outputDir)) {
        New-Item -Path $outputDir -ItemType Directory -Force | Out-Null
    }
    
    # Download the ISO
    Write-Host "Downloading Windows 11 ISO to: $outputPath"
    Write-Host "This may take a while depending on your internet connection..."
    
    try {
        # Using .NET webclient for better progress reporting
        $webClient = New-Object System.Net.WebClient
        $webClient.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        
        # Add progress reporting
        $totalBytes = 0
        $receivedBytes = 0
        
        $webClient.DownloadFileCompleted += { 
            Write-Host "
Download completed! File saved to: $outputPath" 
        }
        
        $webClient.DownloadProgressChanged += { 
            param($sender, $e)
            if ($totalBytes -eq 0) { $totalBytes = $e.TotalBytesToReceive }
            $receivedBytes = $e.BytesReceived
            $percent = $e.ProgressPercentage
            $downloadedMB = [Math]::Round($receivedBytes / 1MB, 2)
            $totalMB = [Math]::Round($totalBytes / 1MB, 2)
            
            Write-Progress -Activity "Downloading Windows 11 ISO" -Status "$downloadedMB MB of $totalMB MB" -PercentComplete $percent
        }
        
        $webClient.DownloadFileAsync((New-Object System.Uri($downloadURL)), $outputPath)
        
        # Wait until download completes
        while ($webClient.IsBusy) {
            Start-Sleep -Milliseconds 500
        }
        
        Write-Host "Windows 11 ISO download completed successfully!"
        Write-Host "File saved to: $outputPath"
    }
    catch {
        Write-Error "Error downloading file: $($_.Exception.Message)"
        exit 1
    }
} else {
    Write-Host "Download canceled. You can download manually using the URL above."
}
