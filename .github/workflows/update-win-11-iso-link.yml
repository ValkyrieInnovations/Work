name: Get Windows 11 Download Link

permissions:
  contents: write

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight UTC
  workflow_dispatch:     # Allow manual trigger

jobs:
  get-windows11-link:
    runs-on: windows-latest  # Using Windows runner for better PowerShell support
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download Fido Script
        run: |
          # Create directory for scripts
          New-Item -Path "scripts" -ItemType Directory -Force
          
          # Download Fido.ps1 from the official repository
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/pbatard/Fido/master/Fido.ps1" -OutFile "scripts\Fido.ps1"
          
          # Verify the script was downloaded
          if (Test-Path "scripts\Fido.ps1") {
            Write-Host "Fido script downloaded successfully"
          } else {
            Write-Error "Failed to download Fido script"
            exit 1
          }
      
      - name: Get Windows 11 Download Link
        id: get_link
        run: |
          # Change to scripts directory
          Set-Location scripts
          
          # Run Fido script to get Windows 11 download link
          # -Win 11 specifies Windows 11
          # -Rel "Latest" gets the latest release
          # -Lang "English" for English language
          # -Ed "Pro" for Windows 11 Pro edition
          # -GetUrl to only get the URL without downloading
          $downloadUrl = (& .\Fido.ps1 -Win 11 -Rel "Latest" -Lang "English" -Ed "Pro" -GetUrl)
          
          # Output the result for debugging
          Write-Host "Download URL: $downloadUrl"
          
          # Save the URL to a file
          $downloadUrl | Out-File -FilePath "windows11_download_link.txt" -Force
          
          # Set output variable for use in subsequent steps
          "download_link=$downloadUrl" >> $env:GITHUB_OUTPUT
      
      - name: Create Helper PowerShell Script
        run: |
          $downloadLink = Get-Content "scripts\windows11_download_link.txt"
          $helperScript = @"
          # Windows 11 Download Helper Script
          # Generated by GitHub Action on $(Get-Date -Format "yyyy-MM-dd")
          
          # The following link is direct from Microsoft and valid long-term:
          `$downloadURL = "$downloadLink"
          
          # Ask user if they want to download the ISO
          `$downloadISO = Read-Host "Do you want to download Windows 11 ISO now? (Y/N)"
          
          if (`$downloadISO -eq "Y" -or `$downloadISO -eq "y") {
              `$outputPath = "`$env:USERPROFILE\Downloads\Windows11.iso"
              
              # Ask if user wants to change default path
              `$changePath = Read-Host "Default download location is: `$outputPath. Change? (Y/N)"
              
              if (`$changePath -eq "Y" -or `$changePath -eq "y") {
                  `$outputPath = Read-Host "Enter new path (including filename.iso)"
              }
              
              # Create directory if it doesn't exist
              `$outputDir = Split-Path -Parent `$outputPath
              if (!(Test-Path `$outputDir)) {
                  New-Item -Path `$outputDir -ItemType Directory -Force | Out-Null
              }
              
              # Download the ISO
              Write-Host "Downloading Windows 11 ISO to: `$outputPath"
              Write-Host "This may take a while depending on your internet connection..."
              
              try {
                  # Using .NET webclient for better progress reporting
                  `$webClient = New-Object System.Net.WebClient
                  `$webClient.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
                  
                  # Add progress reporting
                  `$totalBytes = 0
                  `$receivedBytes = 0
                  
                  `$webClient.DownloadFileCompleted += { 
                      Write-Host "`nDownload completed! File saved to: `$outputPath" 
                  }
                  
                  `$webClient.DownloadProgressChanged += { 
                      param(`$sender, `$e)
                      if (`$totalBytes -eq 0) { `$totalBytes = `$e.TotalBytesToReceive }
                      `$receivedBytes = `$e.BytesReceived
                      `$percent = `$e.ProgressPercentage
                      `$downloadedMB = [Math]::Round(`$receivedBytes / 1MB, 2)
                      `$totalMB = [Math]::Round(`$totalBytes / 1MB, 2)
                      
                      Write-Progress -Activity "Downloading Windows 11 ISO" -Status "`$downloadedMB MB of `$totalMB MB" -PercentComplete `$percent
                  }
                  
                  `$webClient.DownloadFileAsync((New-Object System.Uri(`$downloadURL)), `$outputPath)
                  
                  # Wait until download completes
                  while (`$webClient.IsBusy) {
                      Start-Sleep -Milliseconds 500
                  }
                  
                  Write-Host "Windows 11 ISO download completed successfully!"
                  Write-Host "File saved to: `$outputPath"
              }
              catch {
                  Write-Error "Error downloading file: `$(`$_.Exception.Message)"
                  exit 1
              }
          } else {
              Write-Host "Download canceled. You can download manually using the URL above."
          }
          "@
          
          Set-Content -Path "download_windows11.ps1" -Value $helperScript
      
      - name: Update repository with download link
        run: |
          if (Test-Path "scripts\windows11_download_link.txt") {
            $downloadLink = Get-Content "scripts\windows11_download_link.txt"
            
            if ($downloadLink -like "http*") {
              Write-Host "Successfully retrieved Windows 11 download link: $downloadLink"
              
              # Copy the link file to the repository root
              Copy-Item "scripts\windows11_download_link.txt" -Destination "windows11_download_link.txt" -Force
              
              # Configure Git
              git config --global user.name "GitHub Actions Bot"
              git config --global user.email "actions@github.com"
              
              # Add, commit and push changes
              git add windows11_download_link.txt download_windows11.ps1
              git commit -m "Update Windows 11 download link" -m "Automated update via GitHub Actions"
              git push
            } else {
              Write-Host "Error: Retrieved link does not appear to be valid: $downloadLink"
              exit 1
            }
          } else {
            Write-Host "Error: windows11_download_link.txt file not found"
            exit 1
          }
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Windows11-Download-Helper
          path: |
            download_windows11.ps1
            scripts/windows11_download_link.txt
          if-no-files-found: warn
