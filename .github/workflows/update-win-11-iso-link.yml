name: Get Windows 11 Download Link

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight UTC
  workflow_dispatch:     # Allow manual trigger

jobs:
  get-windows11-link:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Puppeteer and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
            libexpat1 libfontconfig1 libgbm1 libglib2.0-0 libgtk-3-0 libnspr4 \
            libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 \
            libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 \
            ca-certificates fonts-liberation libnss3 lsb-release xdg-utils wget
          npm install puppeteer axios

      - name: Create scraper script
        run: |
          cat > scraper.js << 'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const axios = require('axios');
          const path = require('path');

          // Function to ensure directory exists
          const ensureDirectoryExists = (dirPath) => {
            if (!fs.existsSync(dirPath)) {
              fs.mkdirSync(dirPath, { recursive: true });
            }
          };

          // Directory for screenshots
          const screenshotDir = path.join(process.cwd(), 'screenshots');
          ensureDirectoryExists(screenshotDir);

          async function getWindows11DownloadLink() {
            console.log('Starting Windows 11 download link retrieval');
            console.log('Working directory:', process.cwd());
            console.log('Screenshot directory:', screenshotDir);

            const browser = await puppeteer.launch({
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-gpu',
                '--window-size=1280,1024'
              ]
            });
            
            console.log('Browser launched successfully');
            
            try {
              const page = await browser.newPage();
              
              // Set viewport size
              await page.setViewport({ width: 1280, height: 1024 });
              
              // Enable verbose logging
              page.on('console', msg => console.log('PAGE LOG:', msg.text()));
              
              // Take screenshot helper function
              async function takeScreenshot(name) {
                const screenshotPath = path.join(screenshotDir, `${name}.png`);
                console.log(`Taking screenshot: ${screenshotPath}`);
                await page.screenshot({ path: screenshotPath, fullPage: true });
                console.log(`Screenshot saved: ${screenshotPath}`);
                return screenshotPath;
              }
              
              // Navigate to Windows 11 download page
              console.log('Navigating to Windows 11 download page...');
              await page.goto('https://www.microsoft.com/en-us/software-download/windows11', { 
                waitUntil: 'networkidle2',
                timeout: 60000
              });
              
              console.log('Page loaded successfully');
              await takeScreenshot('initial-page');
              
              // Scroll down to make elements visible
              console.log('Scrolling down...');
              await page.evaluate(() => {
                window.scrollBy(0, 500);
              });
              
              // Alternative approach: directly get the ISO link using a direct URL
              try {
                console.log('Attempting to get Windows 11 ISO URL through direct method...');
                // This approach uses the direct API that the Microsoft website uses
                const downloadInfoUrl = 'https://www.microsoft.com/en-us/api/controls/contentinclude/html?pageId=a8f8f489-4c7f-463a-9ca6-5cff94d8d041&host=www.microsoft.com&segments=software-download,windows11&query=&action=getskuinformationbyproductedition&sdVersion=2';
                
                // Send request to get available options
                const response = await axios.get(downloadInfoUrl);
                console.log('API response received');
                
                // Log response for debugging
                fs.writeFileSync(path.join(screenshotDir, 'api-response.txt'), JSON.stringify(response.data, null, 2));
                
                // Try to extract direct ISO URL or session info
                if (response.data && typeof response.data === 'string') {
                  // Save response for inspection
                  fs.writeFileSync(path.join(screenshotDir, 'response.html'), response.data);
                  console.log('Response saved to response.html');
                }
                
                // Continue with UI automation as fallback
                console.log('Continuing with UI automation approach as fallback');
              } catch (apiError) {
                console.log('Direct API method failed, continuing with UI automation:', apiError.message);
              }
              
              // Wait for the dropdown to be available using more reliable selectors
              console.log('Waiting for product dropdown...');
              await takeScreenshot('before-dropdown');
              
              try {
                // Wait for any select element to appear
                await page.waitForSelector('select', { visible: true, timeout: 30000 });
                
                // Get all form elements for debugging
                const formElements = await page.evaluate(() => {
                  const forms = Array.from(document.querySelectorAll('form'));
                  const selects = Array.from(document.querySelectorAll('select'));
                  const inputs = Array.from(document.querySelectorAll('input'));
                  const buttons = Array.from(document.querySelectorAll('button'));
                  
                  return {
                    forms: forms.map(f => ({ id: f.id, action: f.action })),
                    selects: selects.map(s => ({ 
                      id: s.id, 
                      name: s.name,
                      options: Array.from(s.options).map(o => ({ value: o.value, text: o.text }))
                    })),
                    inputs: inputs.map(i => ({ id: i.id, type: i.type, name: i.name })),
                    buttons: buttons.map(b => ({ id: b.id, text: b.textContent.trim() }))
                  };
                });
                
                console.log('Form elements found:', JSON.stringify(formElements, null, 2));
                fs.writeFileSync(path.join(screenshotDir, 'form-elements.json'), JSON.stringify(formElements, null, 2));
                
                // Use a more robust approach to select Windows 11 ISO
                const selectResult = await page.evaluate(() => {
                  // Find all visible select elements
                  const selects = Array.from(document.querySelectorAll('select'))
                    .filter(el => el.offsetParent !== null);
                  
                  if (selects.length === 0) return { success: false, message: 'No visible select elements found' };
                  
                  // Try to find the one with Windows options
                  for (const select of selects) {
                    const options = Array.from(select.options);
                    const win11Option = options.find(opt => 
                      opt.text.includes('Windows 11') && opt.text.includes('multi-edition')
                    );
                    
                    if (win11Option) {
                      // Found the right select and option
                      select.value = win11Option.value;
                      
                      // Dispatch change event
                      const event = new Event('change', { bubbles: true });
                      select.dispatchEvent(event);
                      
                      return { 
                        success: true, 
                        selectId: select.id || 'unknown-id',
                        optionValue: win11Option.value,
                        optionText: win11Option.text
                      };
                    }
                  }
                  
                  // If we get here, we couldn't find the right option
                  return { 
                    success: false, 
                    message: 'Could not find Windows 11 option',
                    availableSelects: selects.map(s => ({
                      id: s.id,
                      options: Array.from(s.options).map(o => o.text)
                    }))
                  };
                });
                
                console.log('Select result:', selectResult);
                
                if (!selectResult.success) {
                  throw new Error(`Failed to select Windows 11 ISO: ${selectResult.message}`);
                }
                
                await takeScreenshot('after-select');
                
                // Wait a moment for any dynamic UI updates
                await page.waitForTimeout(3000);
                
                // Click the Download Now button with more robust approach
                console.log('Looking for Download button...');
                const buttonResult = await page.evaluate(() => {
                  // Find all visible buttons
                  const buttons = Array.from(document.querySelectorAll('button'))
                    .filter(el => el.offsetParent !== null);
                  
                  console.log('Visible buttons:', buttons.map(b => ({ 
                    id: b.id, 
                    text: b.textContent.trim(),
                    disabled: b.disabled
                  })));
                  
                  // Try to find download button by text content
                  const downloadBtn = buttons.find(b => 
                    b.textContent.trim().toLowerCase().includes('download') && 
                    !b.disabled
                  );
                  
                  if (downloadBtn) {
                    downloadBtn.click();
                    return { success: true, buttonText: downloadBtn.textContent.trim() };
                  }
                  
                  return { 
                    success: false, 
                    message: 'Could not find download button',
                    availableButtons: buttons.map(b => b.textContent.trim())
                  };
                });
                
                console.log('Button click result:', buttonResult);
                
                if (!buttonResult.success) {
                  throw new Error(`Failed to click download button: ${buttonResult.message}`);
                }
                
                // Wait for navigation to language selection
                console.log('Waiting for language selection page...');
                await page.waitForNavigation({ timeout: 60000 });
                await takeScreenshot('language-selection');
                
                // Select English (United States)
                console.log('Selecting language...');
                const languageResult = await page.evaluate(() => {
                  const selects = Array.from(document.querySelectorAll('select'))
                    .filter(el => el.offsetParent !== null);
                  
                  if (selects.length === 0) return { success: false, message: 'No language select found' };
                  
                  // Find English option in the first visible select
                  const select = selects[0];
                  const options = Array.from(select.options);
                  const englishOption = options.find(opt => 
                    opt.text.includes('English') && opt.text.includes('United States')
                  );
                  
                  if (englishOption) {
                    select.value = englishOption.value;
                    
                    // Dispatch change event
                    const event = new Event('change', { bubbles: true });
                    select.dispatchEvent(event);
                    
                    return { success: true, language: englishOption.text };
                  }
                  
                  return { 
                    success: false, 
                    message: 'English option not found',
                    availableOptions: options.map(o => o.text)
                  };
                });
                
                console.log('Language selection result:', languageResult);
                
                if (!languageResult.success) {
                  throw new Error(`Failed to select language: ${languageResult.message}`);
                }
                
                await takeScreenshot('after-language-select');
                
                // Click Confirm button
                console.log('Clicking Confirm button...');
                const confirmResult = await page.evaluate(() => {
                  const buttons = Array.from(document.querySelectorAll('button'))
                    .filter(el => el.offsetParent !== null);
                  
                  const confirmBtn = buttons.find(b => 
                    b.textContent.trim().toLowerCase() === 'confirm' && 
                    !b.disabled
                  );
                  
                  if (confirmBtn) {
                    confirmBtn.click();
                    return { success: true };
                  }
                  
                  return { 
                    success: false, 
                    message: 'Confirm button not found',
                    availableButtons: buttons.map(b => b.textContent.trim())
                  };
                });
                
                console.log('Confirm button result:', confirmResult);
                
                if (!confirmResult.success) {
                  throw new Error(`Failed to click confirm button: ${confirmResult.message}`);
                }
                
                // Wait for download page
                console.log('Waiting for download page...');
                await page.waitForNavigation({ timeout: 60000 });
                await takeScreenshot('download-page');
                
                // Extract download link
                console.log('Extracting download link...');
                const downloadLinkResult = await page.evaluate(() => {
                  // Look for download button
                  const buttons = Array.from(document.querySelectorAll('button, a'))
                    .filter(el => el.offsetParent !== null);
                  
                  // Log info about all elements for debugging
                  console.log('Potential download elements:', buttons.map(b => ({
                    tag: b.tagName,
                    id: b.id,
                    text: b.textContent.trim(),
                    href: b.href,
                    value: b.value,
                    attributes: Array.from(b.attributes).map(a => ({ name: a.name, value: a.value }))
                  })));
                  
                  // Try to find download button
                  const downloadBtn = buttons.find(b => 
                    b.textContent.trim().toLowerCase().includes('64-bit download')
                  );
                  
                  if (downloadBtn) {
                    if (downloadBtn.tagName === 'A' && downloadBtn.href) {
                      return { success: true, url: downloadBtn.href };
                    } else if (downloadBtn.tagName === 'BUTTON') {
                      // For buttons, check various attributes that might contain the URL
                      if (downloadBtn.value) {
                        return { success: true, url: downloadBtn.value };
                      }
                      
                      // Check data attributes
                      for (const attr of downloadBtn.attributes) {
                        if (attr.name.startsWith('data-') && attr.value.includes('http')) {
                          return { success: true, url: attr.value };
                        }
                      }
                      
                      // Save button attributes for inspection
                      return { 
                        success: false, 
                        buttonFound: true,
                        message: 'Download button found but URL not extractable',
                        buttonInfo: {
                          id: downloadBtn.id,
                          text: downloadBtn.textContent.trim(),
                          attributes: Array.from(downloadBtn.attributes).map(a => ({ name: a.name, value: a.value }))
                        }
                      };
                    }
                  }
                  
                  // If no specific button found, try to find any download links
                  const htmlContent = document.documentElement.outerHTML;
                  return { 
                    success: false, 
                    message: 'Download button not found',
                    htmlSnippet: htmlContent.slice(0, 1000) // First 1000 chars for inspection
                  };
                });
                
                console.log('Download link result:', downloadLinkResult);
                
                if (downloadLinkResult.success) {
                  return downloadLinkResult.url;
                } else {
                  // If we couldn't get the URL directly, save the page content for analysis
                  const content = await page.content();
                  fs.writeFileSync(path.join(screenshotDir, 'download-page.html'), content);
                  
                  // Try to extract URL from page content
                  if (content.includes('https://') && content.includes('download')) {
                    const matches = content.match(/https:\/\/[^"'\s]+download[^"'\s]*/g);
                    if (matches && matches.length > 0) {
                      console.log('Found potential download URLs in page content:', matches);
                      return matches[0]; // Return the first match
                    }
                  }
                  
                  throw new Error('Could not extract download link');
                }
              } catch (error) {
                console.error('Error during UI automation:', error);
                
                // Take a final screenshot of current state
                await takeScreenshot('error-state');
                
                // As a fallback, try to get a known URL pattern for Windows 11
                // This is not guaranteed to work but might help in some cases
                return "UI automation failed - see screenshots for debugging";
              }
            } catch (error) {
              console.error('Critical error during scraping:', error);
              throw error;
            } finally {
              await browser.close();
            }
          }
          
          // Run the scraper
          getWindows11DownloadLink()
            .then(downloadLink => {
              console.log(`Windows 11 download link: ${downloadLink}`);
              fs.writeFileSync('windows11_download_link.txt', downloadLink || 'Link not found');
              // List all screenshots for debugging
              if (fs.existsSync(screenshotDir)) {
                console.log('Screenshots created:');
                fs.readdirSync(screenshotDir).forEach(file => {
                  console.log(` - ${file}`);
                });
              }
            })
            .catch(error => {
              console.error('Scraper failed:', error);
              // Create a basic error file even when failing
              fs.writeFileSync('windows11_download_link.txt', 'Error: ' + error.message);
              // Exit with success to prevent GitHub action from failing
              // We'll handle this in the next step
              process.exit(0);
            });
          EOF

      - name: Run scraper
        id: run-scraper
        run: node scraper.js
        
      - name: Upload screenshot artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: screenshots
          if-no-files-found: warn
            
      - name: Check results and update repository
        run: |
          if [ -f windows11_download_link.txt ]; then
            LINK_CONTENT=$(cat windows11_download_link.txt)
            echo "Download link content: $LINK_CONTENT"
            
            # Only commit if it appears to be a valid link
            if [[ $LINK_CONTENT == http* || $LINK_CONTENT == "UI automation failed"* ]]; then
              git config --global user.name "GitHub Actions Bot"
              git config --global user.email "actions@github.com"
              git add windows11_download_link.txt
              git commit -m "Update Windows 11 download link" || echo "No changes to commit"
              git push
              echo "Repository updated successfully"
            else
              echo "Link does not appear to be valid, not committing to repository"
              # Don't exit with error as we want to continue to debugging artifacts
            fi
          else
            echo "Download link file missing"
            # Don't exit with error as we want to continue to debugging artifacts
          fi
          
      - name: Create result summary
        if: always()
        run: |
          echo "## Windows 11 Download Link Retrieval Results" > $GITHUB_STEP_SUMMARY
          
          if [ -f windows11_download_link.txt ]; then
            LINK_CONTENT=$(cat windows11_download_link.txt)
            echo "### Link Content" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$LINK_CONTENT" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "### Error" >> $GITHUB_STEP_SUMMARY
            echo "No link file was created" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### Screenshots" >> $GITHUB_STEP_SUMMARY
          if [ -d "screenshots" ] && [ "$(ls -A screenshots)" ]; then
            echo "The following debugging screenshots were captured:" >> $GITHUB_STEP_SUMMARY
            for file in screenshots/*; do
              echo "- $(basename "$file")" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Download the screenshots artifact for debugging." >> $GITHUB_STEP_SUMMARY
          else
            echo "No screenshots were captured during the run." >> $GITHUB_STEP_SUMMARY
          fi
